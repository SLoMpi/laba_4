#include <iostream>
#include <limits>
#include <vector>
using namespace std;
float mean(const vector<float>& values) {
    if (values.size() == 0) return 0;
    float sum = 0;
    for(int i = 0; i < values.size(); i++)sum+=values[i] ;
    return sum/values.size();
}
pair<float, float> minMax(const vector<float>& values) {
    if (values.size() == 0) {
        numeric_limits<float>::min();
        numeric_limits<float>::max();
    }
    float min = values[0],max=values[0];
    for(int i = 0; i < values.size(); i++) {
        if(values[i]<min) min = values[i];
        if(values[i]>max) max = values[i];
    }
    return make_pair(min, max);
}
size_t argmax(const vector<float>& data) {
    if (data.empty())return -1;
    size_t max_index = 0;
    float max_value = data[0];

    for (size_t i = 1; i < data.size(); ++i) {
        if (data[i] > max_value) {
            max_index = i;
            max_value = data[i];
        }
    }

    return max_index;
}

void sort(std::vector<float>& values) {
    int n = values.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (values[j] < values[j + 1]) {
                float temp = values[j];
                values[j] = values[j + 1];
                values[j + 1] = temp;
            }
        }
    }
}
bool remove_first_negative_element(std::vector<int>& vec, int& removed_element) {
    for (size_t i = 0; i < vec.size(); i++) {
        if (vec[i] < 0) {
            removed_element = vec[i];
            vec.erase(vec.begin() + i);
            return true;
        }
    }
    return false;
}
std::string replace(const std::string& str, const std::string& old, const std::string& new_string) {
    std::string result = str;
    size_t pos = 0;

    while ((pos = result.find(old, pos)) != std::string::npos) {
        result.replace(pos, old.length(), new_string);
        pos += new_string.length();
    }

    return result;
}
std::vector<std::string> split(const std::string& str, char sep) {
    std::vector<std::string> result;
    size_t start = 0;
    size_t end;
    while ((end = str.find(sep, start)) != std::string::npos) {
        if (end != start) {
            result.push_back(str.substr(start, end - start));
        }
        start = end + 1;
    }
    if (start < str.length()) {
        result.push_back(str.substr(start));
    }

    return result;
}
std::string join(const std::vector<std::string>& vec, const std::string& sep) {
    std::string result;

    for (size_t i = 0; i < vec.size(); ++i) {
        result += vec[i];
        if (i < vec.size() - 1) {
            result += sep;
        }
    }

    return result;
}
